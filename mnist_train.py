# -*- coding: utf-8 -*-
"""firstcnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z8jBjtNtzO2o34OkLMgHYGCnGMUZryGe
"""

import tensorflow.keras as keras

import matplotlib.pyplot as plt
from  keras.datasets import mnist
from sklearn.model_selection import train_test_split
from keras import backend as K

nclasses=10
b_size=256
nepochs = 50

(x_train, y_train), (x_test, y_test) = mnist.load_data()

img_rows = 28
img_cols = 28

if K.image_data_format() == 'channels_first':
    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
    input_shape = (1, img_rows, img_cols)
else:
    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
    input_shape = (img_rows, img_cols, 1)

y_train = keras.utils.to_categorical(y_train, nclasses)
y_test = keras.utils.to_categorical(y_test, nclasses)

x_train, x_val, y_train, y_val = train_test_split(x_train,y_train,test_size = 0.25)
print(y_train.shape)

from keras.layers import Dense, Flatten, SeparableConv2D, BatchNormalization
from keras.models import Sequential

model = Sequential()

model.add(SeparableConv2D(32,(3,3),strides=(1,1), activation = 'relu', input_shape=input_shape))
model.add(BatchNormalization())

model.add(SeparableConv2D(64,(3,3),strides=(2,2), activation = 'relu'))
model.add(BatchNormalization())

model.add(SeparableConv2D(128,(3,3),strides=(1,1), activation = 'relu'))
model.add(BatchNormalization())

model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dense(nclasses, activation='softmax'))

print(model.summary())

model.compile(loss='categorical_crossentropy',
              optimizer = 'adam',
              metrics = ['accuracy'])

hist = model.fit(x_train, y_train, validation_data=(x_val,y_val), epochs=nepochs, batch_size=b_size)

score= model.evaluate(x_test, y_test, batch_size=128)
score

print(hist.history.keys())

plt.plot(hist.history['acc'])
plt.plot(hist.history['val_acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

model.save('cnn.h5')

